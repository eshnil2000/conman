syntax = 'proto3';

option go_package = "server";

service Conman {
    rpc Version(VersionRequest) returns (VersionResponse) {}

    rpc CreateContainer(CreateContainerRequest) returns (CreateContainerResponse) {}
    rpc StartContainer(StartContainerRequest) returns (StartContainerResponse) {}
    rpc StopContainer(StopContainerRequest) returns (StopContainerResponse) {}
    rpc RemoveContainer(RemoveContainerRequest) returns (RemoveContainerResponse) {}
    rpc ListContainers(ListContainersRequest) returns (ListContainersResponse) {}
    rpc ContainerStatus(ContainerStatusRequest) returns (ContainerStatusResponse) {}
  
    // rpc Exec
    // rpc ExecSync
    // rpc Attach
    // rpc ReopenContainerLog
    // ...
}

message VersionRequest {}

message VersionResponse {
    string version = 1;
    string runtime_name = 2;
    string runtime_version = 3;
}

message CreateContainerRequest {
    string name = 1;

    string rootfs_path = 2;

    bool rootfs_readonly = 3;

    string command = 4;

    repeated string args = 5;
}

message CreateContainerResponse {
    string container_id = 1;
}

message StartContainerRequest {
    string container_id = 1;
}

message StartContainerResponse {}

message StopContainerRequest {
    string container_id = 1;

    // Timeout in seconds before forcebly killing container (SIGKILL)
    int64 timeout = 2;
}

message StopContainerResponse {}

message RemoveContainerRequest {
    string container_id = 1;
}

message RemoveContainerResponse {}

message ListContainersRequest {}

message ListContainersResponse {
    repeated Container containers = 1;
}

message ContainerStatusRequest {
    string container_id = 1;
}

message ContainerStatusResponse {
    ContainerStatus status = 1;
}

message Container {
    string id = 1;

    // Unix time in nanoseconds
    int64 created_at = 2;

    ContainerState state = 3;
}

message ContainerStatus {
    string container_id = 1;

    ContainerState state = 2;

    // Unix time in nanoseconds
    int64 created_at = 3;

    // Unix time in nanoseconds
    int64 started_at = 4;

    // Unix time in nanoseconds
    int64 finished_at = 5;
}

enum ContainerState {
    CREATED = 0;
    RUNNING = 1;
    EXITED  = 2;
    UNKNOWN = 3;
}

